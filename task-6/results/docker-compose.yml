version: "3.8"

services:
  postgresdb:
    image: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=productsdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/main/resources/schema-all.sql:/docker-entrypoint-initdb.d/schema-all.sql

  elasticsearch:
    image: 'elasticsearch:7.17.28'
    platform: linux/amd64
    container_name: 'elasticsearch'
    restart: 'unless-stopped'
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - 'discovery.type=single-node'
      - 'xpack.security.enabled=false'
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    healthcheck:
      test: 'curl -f http://localhost:9200 || exit 1'

  logstash:
    image: 'logstash:7.17.28'
    container_name: 'logstash'
    restart: 'unless-stopped'
    ports:
      - '5044:5044'
    volumes:
      - './logstash/pipeline:/usr/share/logstash/pipeline/'
    depends_on:
      - 'elasticsearch'
    healthcheck:
      test: 'curl -f http://localhost:9600 || exit 1'

  kibana:
    image: 'kibana:7.17.28'
    container_name: 'kibana'
    restart: 'unless-stopped'
    ports:
      - '5601:5601'
    environment:
      - 'ELASTICSEARCH_HOSTS=http://elasticsearch:9200'
    depends_on:
      - 'elasticsearch'
    healthcheck:
      test: 'curl -f http://localhost:5601 || exit 1'

  kibana-init:
    image: 'curlimages/curl:8.1.2'
    container_name: 'kibana-init'
    depends_on:
      - 'kibana'
    volumes:
      - './kibana/init-kibana.sh:/init-kibana.sh:ro'
    entrypoint: ["/bin/sh", "/init-kibana.sh"]

  filebeat:
    build: 'filebeat'
    container_name: 'filebeat'
    restart: 'unless-stopped'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '/var/lib/docker/containers:/usr/share/dockerlogs/data:ro'
    depends_on:
      - 'elasticsearch'
      - 'logstash'

  prometheus:
    image: 'prom/prometheus:v3.4.0'
    container_name: 'prometheus'
    restart: 'unless-stopped'
    volumes:
      - './prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9090" ]

  grafana:
    image: 'grafana/grafana:12.0.1'
    container_name: 'grafana'
    restart: 'unless-stopped'
    ports:
      - '3000:3000'
    environment:
      - 'GF_USERS_ALLOW_SIGN_UP=false'
    volumes:
      - './grafana/provisioning:/etc/grafana/provisioning'
    depends_on:
      - 'prometheus'
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "3000" ]

  app:
    depends_on:
      - postgresdb
      - filebeat
      - grafana
      - jaeger
    image: batch-processing
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: no
    ports:
      - "8080:8080"

  jaeger:
    image: jaegertracing/all-in-one:1.54
    container_name: jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "4318:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:16686"]

  batch-client:
    depends_on:
      - app
      - jaeger
    build:
      context: ./client
      dockerfile: ./Dockerfile
    restart: no
    environment:
      - BATCH_API_URL=http://app:8080

volumes:
  postgres_data: